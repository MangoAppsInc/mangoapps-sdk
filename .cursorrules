# MangoApps SDK - Cursor AI Configuration
# This file configures AI behavior for the MangoApps Ruby SDK project

## Project Overview
You are working on the MangoApps SDK, a Ruby gem for interacting with MangoApps APIs using OAuth2/OpenID Connect.

## Core Principles
- **Real TDD First**: Always write real tests before implementation (no mocking)
- **Incremental Development**: Add one resource at a time
- **Clean Architecture**: Modular, testable code
- **OAuth2/OIDC**: Proper authentication flow with real credentials
- **Faraday HTTP**: With retries and JSON handling
- **Environment Variables**: Secure credential management
- **Clean Response API**: Automatic response wrapping with intuitive dot notation access

## Technology Stack
- **Language**: Ruby (>= 3.0)
- **Testing**: RSpec (real tests only, no mocking)
- **HTTP Client**: Faraday with retry middleware
- **Authentication**: OAuth2 + OIDC discovery
- **Configuration**: Environment variables with dotenv
- **Package Manager**: Bundler + RubyGems

## File Structure
```
mangoapps-sdk/
├── lib/
│   ├── mangoapps.rb              # Main module
│   ├── mangoapps/config.rb       # Configuration
│   ├── mangoapps/client.rb       # HTTP client
│   ├── mangoapps/oauth.rb        # OAuth2/OIDC
│   ├── mangoapps/response.rb     # Response wrapper for clean dot notation
│   ├── mangoapps/errors.rb       # Error classes
│   ├── mangoapps/version.rb      # Version info
│   └── mangoapps/modules/        # API modules
│       ├── learn.rb              # Learn module
│       ├── users.rb              # Users module
│       └── learn/                # Learn sub-modules
│           ├── course_catalog.rb # Course catalog
│           └── course_categories.rb # Course categories
├── spec/
│   ├── real_spec_helper.rb       # RSpec configuration (real tests only)
│   ├── shared_test_helpers.rb    # Reusable test helpers
│   ├── module_template.rb        # Template for new module tests
│   └── mangoapps/
│       ├── learn_spec.rb         # Learn module tests
│       └── users_spec.rb         # Users module tests
├── run_auth.sh                   # OAuth flow script
├── run_tests.sh                  # API test runner
├── generate_module.rb            # Module generator script
├── MODULES.md                    # Development guidelines
├── .env                          # Environment variables (credentials)
├── .env.example                  # Environment template
└── .cursorrules                  # This file
```

## Development Workflow
1. **OAuth Setup**: `./run_auth.sh` (get fresh token)
3. **Run Tests**: `./run_tests.sh` (should fail)
4. **Implement**: Add minimal code to make tests pass
5. **Refactor**: Improve code while keeping tests green
6. **Commit**: Use conventional commits

### Separated Scripts
- **`./run_auth.sh`**: Interactive OAuth flow, saves token to `.env`
- **`./run_tests.sh`**: Fast API testing (requires valid token in `.env`)

## Code Style
- Use `# frozen_string_literal: true` at top of files
- Follow Ruby style guide
- Use meaningful variable names
- Add comments for complex logic
- Keep methods small and focused

## Testing Guidelines
- **Real OAuth Testing Only**: No mocking, use actual MangoApps API
- **Positive Test Cases Only**: Focus on successful API calls, no error handling tests
- **Clean Response Validation**: Test `MangoApps::Response` objects with dot notation
- Use descriptive test names
- Use environment variables for OAuth credentials
- Test against actual MangoApps domain
- Assert on real API responses with clean dot notation access
- Keep tests simple and focused on functionality
- Validate response structure using `respond_to?` instead of `have_key`

## Resource Development Pattern
When adding a new resource (e.g., Files, Users):

### Using the Module Template (Recommended)
1. **Copy the template**: `cp spec/module_template.rb spec/mangoapps/your_module_spec.rb`
2. **Replace placeholders**:
   - `[MODULE_NAME]` → Your module name (e.g., "Files")
   - `[ENDPOINT_METHOD]` → Your API method (e.g., "files_list")
   - `[RESPONSE_KEY]` → Expected response key (e.g., "files")
   - `[FEATURE_NAME]` → Feature description (e.g., "File Management")
3. **Customize validation** for your specific endpoint

### For Learn Module Resources
1. **Add Real Test to Learn Spec**:
```ruby
# Add to spec/mangoapps/learn_spec.rb
describe "New Learn Resource" do
  it "tests new learn API endpoint" do
    puts "\n📚 Testing New Learn API..."
    
    response = client.new_learn_endpoint
    
    expect(response).to be_a(MangoApps::Response) # Clean response wrapper
    expect(response).to respond_to(:expected_key)
    puts "✅ New Learn API call successful!"
    puts "📊 Response contains expected data structure"
  end
end
```

### For Core API Resources
1. **Add Real Test to Module Spec**:
```ruby
describe "Your API" do
  it "lists items from actual MangoApps API" do
    puts "\n🔍 Testing Your API..."
    
    response = client.your_endpoint
    
    expect(response).to be_a(MangoApps::Response) # Clean response wrapper
    expect(response).to respond_to(:expected_key)
    puts "✅ Your API call successful!"
    puts "📊 Response contains expected data"
  end
end
```

2. **Create Resource Module**:
```ruby
# For Learn Module: lib/mangoapps/modules/learn/new_resource.rb
module MangoApps
  class Client
    module Learn
      module NewResource
        def new_learn_endpoint(params = {})
          get("v2/learn/new_endpoint.json", params: params)
        end
      end
    end
  end
end

# For Core APIs: lib/mangoapps/modules/your_module.rb
module MangoApps
  class Client
    module YourModule
      def your_endpoint(params = {})
        get("v2/your_endpoint.json", params: params)
      end
    end
  end
end
```

3. **Include in Main Module**:
```ruby
# For Learn Module: lib/mangoapps/modules/learn.rb
require_relative "learn/new_resource"
module MangoApps
  class Client
    module Learn
      include MangoApps::Client::Learn::NewResource
    end
  end
end

# For Core APIs: lib/mangoapps.rb
require_relative "mangoapps/modules/your_module"
MangoApps::Client.include(MangoApps::Client::YourModule)
```

## Common Commands
- `./run_auth.sh` - Get fresh OAuth token (interactive)
- `./run_tests.sh` - Run API tests (fast, requires valid token)
- `ruby generate_module.rb ModuleName endpoint_method response_key` - Generate new module with tests
- `cp spec/module_template.rb spec/mangoapps/your_module_spec.rb` - Copy module template
- `bundle exec rspec spec/mangoapps/` - Run all tests
- `bundle exec rspec spec/mangoapps/learn_spec.rb` - Run specific module tests
- `bundle exec rspec --format documentation` - Verbose test output
- `bundle install` - Install dependencies
- `gem build mangoapps-sdk.gemspec` - Build gem

## Error Handling
- Always handle HTTP errors gracefully
- Use proper exception classes
- Log errors when appropriate
- Return meaningful error messages

## Security
- Never commit API keys or secrets
- Use environment variables for sensitive data
- Validate all inputs
- Follow OAuth2 security best practices

## Documentation
- Update README.md with new features
- Add code examples for new resources
- Document breaking changes
- Keep CHANGELOG.md updated

## AI Assistant Instructions
When helping with this project:
1. **Always follow Real TDD approach** - Write real tests before implementation (no mocking)
2. **Production-ready code** - Focus on error handling, security, and performance
3. **Incremental development** - Add one resource at a time
4. **Real OAuth testing** - Use actual MangoApps API with real credentials
5. **Environment variables** - Use .env for secure credential management
6. **Documentation** - Update README and add code examples
7. **Security first** - Implement PKCE, validate inputs, handle tokens securely
8. **Error handling** - Use specific exception types and meaningful messages
9. **Code quality** - Follow Ruby best practices and RuboCop guidelines

## Production Guidelines
- **OAuth Security**: Always use PKCE for public clients
- **Token Management**: Implement secure token storage and refresh
- **Error Handling**: Provide specific exception types for different scenarios
- **Rate Limiting**: Handle 429 responses gracefully
- **Input Validation**: Validate all inputs and sanitize data
- **Logging**: Use structured logging for debugging
- **Testing**: Maintain high test coverage with realistic scenarios

## Common Issues
- **URL Joining**: Ensure API base URL ends with `/` for proper Faraday URL joining
- **Token Expiration**: Run `./run_auth.sh` when token expires
- **Dependencies**: Keep gemspec and Gemfile in sync
- **Error Responses**: Test both success and error scenarios
- **API Response Formats**: Some APIs return XML, others JSON
- **OAuth Flow**: Use `./run_auth.sh` for fresh tokens, `./run_tests.sh` for fast testing

## Release Checklist
- [ ] All tests pass (`./run_tests.sh`)
- [ ] OAuth flow works (`./run_auth.sh`)
- [ ] Documentation updated
- [ ] Version bumped in version.rb
- [ ] Gem builds successfully (`gem build mangoapps-sdk.gemspec`)

## AI Assistant Instructions
When helping with this project:
1. **Always follow Real TDD approach** - Write real tests before implementation (no mocking)
2. **Use separated scripts** - `./run_auth.sh` for OAuth, `./run_tests.sh` for testing
3. **Production-ready code** - Focus on error handling, security, and performance
4. **Incremental development** - Add one resource at a time
5. **Real OAuth testing** - Use actual MangoApps API with real credentials
6. **Environment variables** - Use .env for secure credential management
7. **Documentation** - Update README for users, DEVELOPER.md for developers
8. **Security first** - Implement PKCE, validate inputs, handle tokens securely
9. **Error handling** - Use specific exception types and meaningful messages
10. **Code quality** - Follow Ruby best practices

## Documentation Structure
- **README.md** - User documentation (installation, usage, examples)
- **DEVELOPER.md** - Developer documentation (adding APIs, testing, architecture)
- **CHANGELOG.md** - Release notes and version history
- **MODULES.md** - Module development guidelines

## For SDK Development Tasks
When adding new APIs or modules, refer to DEVELOPER.md for:
- Complete module creation workflow
- Testing guidelines and examples
- Code style and architecture patterns
- Documentation standards
- Release process

Remember: This is a production-ready, TDD-first project with separated OAuth and testing workflows!